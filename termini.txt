# include - директива которая заставляет компилятор включить другие части программы
// так в с++ делаються одна строчные коментарии
C++ название языка компилироемого
cout - поток вывода симболов
main() - главная функция программы ,точка входа в программу
библиотека - некий код написаный другими который можно использовать в программе
вывод - вывод на консоль сообщения
выполняемый уже сделаная программа которую можно запустить
заголовок   - повзоляет включить возможности того что есть в заголовке
инструкция то что должен выполнить машина в этом месте
исходный код - то что написали програмисты и где обычно оставлены коментарии для них же
коментарий - строчка кода предназначеная для програмиста которая что-то обесняет
компилятор - та вешб которая преобразует исходный код в машиный код
obj code    -машиный код
error on compilation -  компилятор не смог преобразовать код в обектный код и выдал ошибку
programm linker  - часть программа которая собирает из несколько частей (из машиных кодов)в исполняемый файл
function - часть програмиы
========================================================
chapter 3
========================================================
cin  -поток ввода с клавиатуры в переменую
декрементцаия -  уменьшения переменой на 1 единицу
значение - набор битов в памяти интерпритируемый в сооттветстии с типом
имя - название переменой, именнаой кусок памяти
инициализация - переменой присвоение значения сразу
инкрементация - увелечения переменой на 1
конкатенация - обединения строк
объект - ячейка памяти что выделена под переменную
обхявления - интрекция присваевает обекту какоето имя
оператор - операцию которые можно сделать с другим такого же типа переменой
операция - действие с переменой
определение -  выделения памяти для обекта
переменная - именнованый обект
преоброзования - изминения типа в другой тип
присваивания - присваевания нового значения переменой
сужение - когда больгой обект хотят впихнуть в маленькой и приходиться урезать его
тип - сколько в памяти занимает переменая 
типовая безопасность - компилятор скажет если нельзя преобразовать или когда в переменую одного типа зотят засунуть переменную другого типа 
========================================================
chapter 4
========================================================
begin() - функция член обекта для типа vector
else - ин
end() - указывает на последний элемент контейнера
lvalue - значения переменой(саму каробку)
push_back() - добовляет в конец вектора новое значение
rvalue - значения что в переменой(что внутри коробки)
size() - возращяет сколько длину вектора
sort() - функция которая позволяет отсортировать значения в контейнере
vector - повледовательность элементов к которым можно обращяться по индексу
абстракция - скорытия деталей которые являються необходимфми для работы с прогой
ввод - ввод данных в функцию или переменную.
выбор - выбор между тем где условия правдивы
вывод - вывод данных в консоль в другую часть программы
вырадение - такие интрукции что заканчиваються точко й с запятой
вычисление - какаято операция после которой будут выходные данные
инкрементация - увелечения значения на 1
иструкция - что должен выполнить в этом месте машина
гиетр for - вид цикла в котором есть инициализация счётчика, проверка и увелечение счётчика
if -(инстркции выбора) осущиствляет выбор между двумя альтернативами
switch - осуществляет выбор между нескольками констрантами
while - цикл в котором проверяеться условие выполнение если оно тру значит цикл продолжаеться
iteration - сколько раз пробежался цикл по этому участку кода
обявление - интрекция присваевает обекту какоето имя
определение - какого типа бцдет переменая
повторение - кусок кода который повторяеться множество рах в проге
разделяй и властвуй - делить программу и код на куски болие понятные и простые
усдовная интрукцию - которая ничего не делает
функция - код который выделей в другой сегмент может возрощять значения и принимать аргументы
функция член - параметр который передаёться функции для выполнения
цикл - участок кода который записан раз но выполняеться много раз в программе
================
termini5
=================
catch -блок программы что ловит искобчения и при них что-то делает
try - блок где будет поймана ошибка
инвариант - истиность которого сохраняеться после каждой /проверки
исключения - не предусмотреная ошибка в выполнии интрукции
контейнер - обект из стандартной библиотеке стд который что-то может хранить в себе
исключение - непредвиденая ошибка программы что-то что не предусмт=отренно функцие
логическая ошибка - неправельно работает скомпилированый код
отладка - исправления программы ,зачищения от багов
ошибка - 
ошибка аргумента - неправельный аргумент передан 
ошибка диапазона - вышли за границы контейнера
ошибка на этапе выполнения- программа запустилась и сразу умерла, например ошибка диапазона
ошибка комп - компилятор не смог преоьрозовать исходники в бинаргики не соответствует языку
ошибка линкера - не найдены функции аргументы что используються в программе ,не подключены модули
ошибка типа - когда типу инт присваевабт строку например
постусловие - проверяеться результат функции коректен ли он и не вызывает ли он исключений
предусловие - проверяет входные данные на то что годяться ли они для функции
синтакическая ишибка - лексомы языка не правельно написаны 
тестирования - поиск всех возможный исключения и корректно ли программа работает с такимето данныеми
требование -качество/усдоваия которые должны выполняеться
утверждение - то что прогррама правельно работает почему так учерены
============================
termini 6
============================
class - выделеный объект в памяти
private - приватная часть класса которая не видна другим пользователям класа
public - публичная часть класа которую видят все
анализ - проверка на то что должна делать программа , что должна делаьть какие входные параметры
грамматика как делаються предложения например из лексем
данные -члена переменные что храняться в класе и которые можно достать используя точку
деления на нуль когда число делиться на 0
интерфейс видемая часть программы с которой пользователь будет взоимодействовать
лексема ежиница языка обычно симбол
прецедентн использования кто -и как будет использовать программу программу описание
программа грамматического анализа
программа синтетического анализа
проектирование - из чего будет состоять программа(классы)ж, какие библиотеки будет использовать ,что будет делать программа
прототип сырой вариант реализации с минимум фугкционала
псевдокод - язык который описывает некие действияна человеческом языке что надо сделать обычно для алгоритмов
реализация написания кода 
функция член функция что находиться в класе и которую вызвать надо через .
член класса переменые или функции что храняться внутри класа находиться в видемости класа
==============================================
termini 9
===================
class - сообственыйопределёный тип данных
const - идентификатор который говорит что даныне нельзя менять
enum - тип позволяюший задавать множество значений
struct - тоже что и класс только все поля по умолчянию публичные
вспомогательная функция - которые расширяют функционал объекта(у которых часто как аргумент сам тип этого самого обхекта) но не сам тип
встроеный типы - те которые написаны в стандарте с++ -инт, double и тому подобные
деструктор - то что срабатывает перед тем как обект будет удалён(некоторое сборище действие(может из не быть) которые надо сделвть пкркд удалением)
инвариант - правила которые отвечает что смвсл корректного значения
интерфейс  - открытая часть класа с которой может юхер взаимодействовать(методы типы и так далие)/ точка сзерия пользователя класа
коструктор - правила или агрументы которые будут
корректное сосотяние - правельно отображеные входные выходные или хранящийся данные
перечисление - тип жанныеъ где люьое значение определяеться симбольной константой класс enum
подставляемая функция - то с чем может работать юхер класа
предстваление - ктип знает как представить данные ввиде данных переменых и так далие
реализация -закрытая часть класа ака точка зрения разраба класса
структура -как обхект только все поля по умолчянию открытые
типы используемые пользователём 
элемент перечисления -значение к класе емнум которое я сам создал
======================
nodala 10
=======================
bad() - флаг который говорит что произошла критическая ошибка в потоке
buffer где времмено зраниться данные межлу апаратным устройством и библиотекой
clear() очистить результат потока и буффер
close() закрыть файловый поток
eof() флаг который говорит конец потока тоесть конец ввода
fail() произошла нежданчик
good()- рперация произошла успешно
ifstream input file stream поток который позваляет считать данные с файла
iostream - позволяет считывать/записывать данные что вводит пользователь выводить в консоль
isstream - input stream отвечает за то чтоб пользователь мог ввести данные в программу
ofstream - вывести данные из прграммы в консоль
open() - открыть файл на низкоуровнём 
ofstream -output file stream поток позволяет записать в файлик данные
unget() - вернуть обратно в поток посдеднйи сиибол/значение что тот принял
Драйвер устройства -как происзодит ввод пользователя в машиуну ,код сделан производителями железа как нажатие клавиши трансформируеться в сигнал и опазнаёться
оператор ввода - >>
оператор ввывода - <<
признак завершения ввода- жто когда новой поступляющийся информации не будет,например конец файла или команда прекратить ввод
состояние потока - отработал ли поток с ошиибками, были ли ошибки при работе потока 
структурированный файл - как то осмыслено и упорядочно в файле написаны данные типо джейсона или [xml]
устройство ввода - то что воспринимает ввод ,например клавиатура или видео сигнал
устрйоство вывода - то что как- то выводит на экран например информацию, тот же экран или колонка
файл - последовательность байтов, у которого есть фомат тоесть набор правил определяющий его смысл